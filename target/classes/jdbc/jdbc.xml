<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
	    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd">


	 <!-- spring 提供的获取外部文件信息的配置 -->
	<bean id="propertyConfigurer"    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="locations" value="classpath:init.properties" >    </property>    
        <property name="fileEncoding" value="utf-8" />
    </bean> 

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		  <property name="driverClassName">   
		    <value>${datasource.driverClassName}</value>
		  </property>    
		  <!-- 基本属性 url、user、password -->        
		  <property name="url">
		     <value>${datasource.url}</value>
		  </property> 
		  <property name="username">
		     <value>${datasource.username}</value>
		  </property>
		  <property name="password">
		     <value>${datasource.password}</value>
		  </property>
		  <!-- 配置初始化大小、最小、最大 -->
		  <property name="maxActive" value="50" />
		  <property name="initialSize" value="30" />
		  <property name="minIdle" value="30" />
		  <!-- maxWait获取连接等待超时的时间 -->
		  <property name="maxWait" value="60000" />
		  <!-- timeBetweenEvictionRunsMillis间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		  <property name="timeBetweenEvictionRunsMillis" value="60000" />
		  <!-- minEvictableIdleTimeMillis一个连接在池中最小空闲的时间，单位是毫秒-->
		  <property name="minEvictableIdleTimeMillis" value="300000" />
		  <property name="validationQuery" value="SELECT 'x'" />
		  <property name="testWhileIdle" value="true" />
		  <property name="testOnBorrow" value="false" />
		  <property name="testOnReturn" value="false" />
		  <property name = "maxOpenPreparedStatements" value ="20" />
		   <!-- 打开 removeAbandoned 功能 -->  
          <property name = "removeAbandoned" value = "true" />  
         <!-- 1800 秒，也就是 30 分钟 -->  
          <property name = "removeAbandonedTimeout" value ="1800" />  
         <!-- 关闭 abanded 连接时输出错误日志 -->     
          <property name = "logAbandoned" value = "true" />   
          <!-- 日志和监控配置 --> 
          <property name="filters" value="stat,log4j" />  
	 </bean>
	
		<!-- 构建一个jdbcTemplate的模板对象 ，这个模板对象里面有dataSource这个变量，这里给他赋予初始值
		这一步相当于： //2.通过连接池构造模板对象
		             JdbcTemplate jdbcTemplate=new JdbcTemplate(dataSource);
		-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="dataSource"/>
	</bean>
	 
	 
	 <!-- 配置 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:/jdbc/SqlMapConfig.xml"/>
        <!-- 加载数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 通过MapperScannerConfigurer进行mapper扫描（建议使用）
     mapper 批量扫描，从 mapper 包中扫描出 mapper 接口，自动创建代理对象，并在 spring 容器中注册名陈为类名首字母小写。
     遵循的规范：将 mapper.java 和 mapper.xml 映射文件名陈一致，且在同一个目录
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描的包，如果存在多个包使用(逗号,)分割 -->
        <property name="basePackage" value="com.hubin.mysqltools.dao" />
        <!-- 注意此处是sqlSessionFactoryBeanName，如果写成 sqlSessionFactory，ref="sqlSessionFactory"
             会造成 <context:property-placeholder location="classpath:config/db.properties"/> 失效 而连接不上数据库
         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
   
     <!-- 配置SqlSessionTemplate -->    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">    
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />    
    </bean>  	 
    
</beans>